apiVersion: v1
kind: Template
message: |-
  The following service(s) have been created in your project: Wordpress, Nginx, MariaDB and Phpmyadmin.
  For more information about using this template, including OpenShift considerations, see https://github.com/Tessg22/wordpress-developer-stack-on-openshift-4/blob/main/README.md.
metadata:
  creationTimestamp: null
  name: wordpress-nginx-php
  annotations:
    description: An example PHP 7.1 application running on Ubuntu with a MySQL database, built for Wordpress. For more information
      about using this template, including OpenShift considerations, see https://github.com/Tessg22/wordpress-developer-stack-on-openshift-4/blob/main/README.md..
    iconClass: icon-wordpress
    openshift.io/display-name: Wordpress + Nginx
    openshift.io/documentation-url: https://github.com/Tessg22/wordpress-developer-stack-on-openshift-4/blob/main/README.md
    openshift.io/long-description: This template defines resources needed to develop a Debian based Wordpress setup running on PHP 7.1 using FPM and Nginx. It also includes resources required to create a MariaDB instance and Phpmyadmin.
    openshift.io/provider-display-name: Tereza Gabrielova
    tags: quickstart,php,wordpress,nginx
    template.openshift.io/bindable: "false"
labels:
  template: wordpress-nginx-template
  app: ${NAME}
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${NAME}
      template: wordpress-template-v4
    name: ${NAME}
  spec:
    ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${NAME}
      template: wordpress-template-v4
    name: ${NAME}-db
  spec:
    ports:
    - name: mariadb
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: ${NAME}-db
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: phpmyadmin
    name: phpmyadmin
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      deploymentconfig: phpmyadmin
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
      template: wordpress-template-v4
    name: ${NAME}
  spec:
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      app: ${NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db-secret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-db-secret
          - name: MYSQL_HOST
            value: ${NAME}-db
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_DATABASE
            value: ${DB_NAME}
          image: docker-registry.default.svc:5000/${NAMESPACE}/${NAME}:1.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - |
                  cp -fr /code/. /app; rm -rfv /shared/*; cp -fr /code/wordpress/* /shared; rm -rf /app/wordpress; ln -s /shared /app/wordpress;
          name: php-fpm
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app
            name: app
          - mountPath: /shared
            name: ${NAME}-files
          - mountPath: /etc/nginx/conf.d/
            name: volume-yjmg0
          - name: wp-config-file
            mountPath: /shared/wp-config.php
            subPath: wp-config.php
        - image: tgabriel/openshift-nginx:1.0
          imagePullPolicy: IfNotPresent
          name: nginx
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app
            name: app
          - mountPath: /shared
            name: ${NAME}-files
          - mountPath: /etc/nginx/conf.d/
            name: volume-yjmg0
          - name: wp-config-file
            mountPath: /shared/wp-config.php
            subPath: wp-config.php
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: app
        - name: ${NAME}-files
          persistentVolumeClaim:
            claimName: ${NAME}-files
        - configMap:
            defaultMode: 420
            name: example-nginx-config
          name: volume-yjmg0
        - name: wp-config-file
          configMap:
            name: wp-config-file
            items:
              - key: wp-config.php
                path: wp-config.php
            defaultMode: 420
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - php-fpm
        from:
          kind: ImageStreamTag
          name: ${NAME}:stable
          namespace: ${NAMESPACE}
        lastTriggeredImage: docker-registry.default.svc:5000/${NAMESPACE}/${NAME}:stable
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
      template: wordpress-template-v4
    name: ${NAME}-db
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: ${NAME}-db
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${NAME}-db
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${NAME}-db-secret
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${NAME}-db-secret
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${NAME}-db-secret
          - name: MYSQL_DATABASE
            value: ${DB_NAME}
          image: docker-registry.default.svc:5000/openshift/mariadb:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mariadb
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 1Gi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${NAME}-db-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${NAME}-db-data
          persistentVolumeClaim:
            claimName: ${NAME}-db
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mariadb
        from:
          kind: ImageStreamTag
          name: mariadb:latest
          namespace: openshift
        lastTriggeredImage: docker-registry.default.svc:5000/openshift/mariadb:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${NAME}
    name: phpmyadmin
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      deploymentconfig: phpmyadmin
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: phpmyadmin
          deploymentconfig: phpmyadmin
      spec:
        containers:
        - env:
          - name: MYSQL_SVCNAME
            value: ${NAME}-db
          - name: MYSQL_USER
            value: root
          - name: MYSQL_PASS
            value: bGUwsXEseTYfrsnk
          image: docker-registry.default.svc:5000/${NAMESPACE}/phpmyadmin:latest
          imagePullPolicy: Always
          name: phpmyadmin
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/app-root/src/config.inc.php
            name: volume-config
            subPath: config.inc.php
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: config.inc.php
              path: config.inc.php
            name: phpmyadmin-config
          name: volume-config
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - phpmyadmin
        from:
          kind: ImageStreamTag
          name: phpmyadmin:latest
          namespace: ${NAMESPACE}
        lastTriggeredImage: docker-registry.default.svc:5000/${NAMESPACE}/phpmyadmin:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${NAME}
      template: wordpress-template-v4
    name: ${NAME}
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:stable
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: https://github.com/Tessg22/wordpress-developer-stack-on-openshift-4/wordpress
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: openshift-nginx-phpfpm-s2i:1.0
          namespace: ${NAMESPACE}
        incremental: true
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: D3yXe5shFAavBUid1gPNF6mXQrgJIqB2YRq108mn
      type: GitHub
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: phpmyadmin
    name: phpmyadmin
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: phpmyadmin:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: LATEST
        uri: https://github.com/phpmyadmin/phpmyadmin.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: php:7.1
          namespace: openshift
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: ${NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
      - name: '1.0'
        annotations: null
        from:
          kind: DockerImage
          name: 'tgabriel/openshift-nginx-phpfpm:1.0'
        generation: 1
        importPolicy: {}
        referencePolicy:
          type: Source
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: openshift-nginx-phpfpm-s2i
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: tgabriel/openshift-nginx-phpfpm-s2i:1.0
      generation: 1
      importPolicy: {}
      name: "1.0"
      referencePolicy:
        type: Source
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    labels:
      app: phpmyadmin
    name: phpmyadmin
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: phpmyadmin:stable
      generation: 2
      importPolicy: {}
      name: stable
      referencePolicy:
        type: Source
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: openshift-nginx
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: tgabriel/openshift-nginx:stable
      generation: 1
      importPolicy: {}
      name: "1.0"
      referencePolicy:
        type: Source
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: ${NAME}
      template: wordpress-template-v4
    name: ${NAME}
  spec:
    host: ${NAME}-${NAMESPACE}${DNS}
    to:
      kind: Service
      name: ${NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: phpmyadmin
    name: phpmyadmin
  spec:
    host: phpmyadmin-${NAMESPACE}${DNS}
    port:
      targetPort: 8080-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: phpmyadmin
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  data:
    wp-config.php: "<?php\n\n/**\n * The base configuration for WordPress\n *\n * The
      wp-config.php creation script uses this file during the\n * installation. You
      don't have to use the web site, you can\n * copy this file to \"wp-config.php\"
      and fill in the values.\n *\n * This file contains the following configurations:\n
      *\n * * MySQL settings\n * * Secret keys\n * * Database table prefix\n * * ABSPATH\n
      *\n * @link https://codex.wordpress.org/Editing_wp-config.php\n *\n * @package
      WordPress\n */\n\n// ** MySQL settings - You can get this info from your web host
      ** //\n\n/** The name of the database for WordPress */\n\ndefine( 'DB_NAME', '${DB_NAME}'
      );\n\n\n/** MySQL database username */\n\ndefine( 'DB_USER', 'root' );\n\n\n/**
      MySQL database password */\n\ndefine( 'DB_PASSWORD', 'bGUwsXEseTYfrsnk' );\n\n\n/**
      MySQL hostname */\n\ndefine( 'DB_HOST', 'wordpress-app-db' );\n\n\n/** Database
      Charset to use in creating database tables. */\n\ndefine( 'DB_CHARSET', 'utf8mb4'
      );\n\n\n/** The Database Collate type. Don't change this if in doubt. */\n\ndefine('DB_COLLATE',
      '');\n\n\n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these
      to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/
      WordPress.org secret-key service}\n * You can change these at any point in time
      to invalidate all existing cookies. This will force all users to have to log in
      again.\n *\n * @since 2.6.0\n */\ndefine( 'AUTH_KEY',        \n'iL>*4TSG2Tp1j.!7BY}e[rRXM!1td%pg_~6,$mN_uDeu+cw|,j[@[nB{,Ad^Qd*5'
      );\n\ndefine( 'SECURE_AUTH_KEY', \n'$Hz,rw,=mEOE`NTctq1;>|1uy&PkK=>JGn]Ono2;2&#X(97me8m,RCPWnRPL_4.N'
      );\n\ndefine( 'LOGGED_IN_KEY',    ' T` HtdNL[iaWa[?i< 5u=4[wkJORO%{V82zQ~zcT;qVp\nwKo
      E#SwIq>r[_nETQ' );\n\ndefine( 'NONCE_KEY',       \n'9[3esx%~|u<)a;*XV7PP%TR.DE[O*gJzd/r^B!WcxgC,_m[_j;yIlEJ^dueN<3el'
      );\n\ndefine( 'AUTH_SALT',       \n'hR2Si^*`m|y^+c<<T$I,ndZYlV_~!})AKWF2px/d38W=N{11(U7N7dwo*+V<y[.x'
      );\n\ndefine( 'SECURE_AUTH_SALT',\n'bSrvA%Rz2g!Z)*}4B^cVXBs!5Ik-27}D]!-UGdrQvN]6M`j9@R3T!M;3GmW
      nyG>' );\n\ndefine( 'LOGGED_IN_SALT',  \n'2z1_yqKZRxg6(.+I;Xqp+U)_Yg06Jo-yv7F[XoBq;@gs{BE}tT98ER[G;IU!oLI~'
      );\n\ndefine( 'NONCE_SALT',      \n'phQdfdNS6p%Je_TGiuGiY]G[@FD7o&izu]WXC<L^]H37F(5d?z3#U~x@69O)/;53'
      );\n\n\n/**#@-*/\n\n\n/**\n * WordPress Database Table prefix.\n *\n * You can
      have multiple installations in one database if you give each\n * a unique prefix.
      Only numbers, letters, and underscores please!\n */\n$table_prefix  = 'wp_';\n\n\n/**\n
      * For developers: WordPress debugging mode.\n *\n * Change this to true to enable
      the display of notices during development.\n * It is strongly recommended that
      plugin and theme developers use WP_DEBUG\n * in their development environments.\n
      *\n * For information on other constants that can be used for debugging,\n * visit
      the Codex.\n *\n * @link https://codex.wordpress.org/Debugging_in_WordPress\n
      */\ndefine('WP_DEBUG', false);\n\n\n/* That's all, stop editing! Happy blogging.
      */\n\n\n/** Absolute path to the WordPress directory. */\n\nif ( !defined('ABSPATH')
      )\n        define('ABSPATH', dirname(__FILE__) . '/');\n\n/** Sets up WordPress
      vars and included files. */\n\nrequire_once(ABSPATH . 'wp-settings.php');\n"
  kind: ConfigMap
  metadata:
    name: wp-config-file
- apiVersion: v1
  data:
    nginx.conf: "server {\n  root /app/web;\n  listen 0.0.0.0:8080;\n  index index.php
      index.html index.htm;\n  server_name ${NAME}-${NAMESPACE}${DNS};\n
      \ client_max_body_size 256M;\n\n  location ~ \\..*/.*\\.php$ {\n    return 403;\n
      \ }\n  \n  location /wp-admin/ {\n    index index.php;\n    try_files $uri $uri/
      /index.php$args;\n  }\n\n  # Block access to hidden directories\n  location ~
      (^|/)\\. {\n    return 403;\n  }\n\n  location ~ ^/sites/.*/private/ {\n    return
      403;\n  }\n\n  # No php is touched for static content\n  location / {\n    try_files
      $uri $uri/ @rewrite;\n  }\n\n  # pass the PHP scripts to FastCGI server\n  location
      ~ \\.php$ {\n    fastcgi_index index.php;\n    try_files $uri =404;\n    fastcgi_split_path_info
      ^(.+\\.php)(/.+)$;\n    # The address or socket on which FastCGI requests are
      accepted. Set yours in www.conf\n    fastcgi_pass 127.0.0.1:9000;\n    fastcgi_param
      SCRIPT_FILENAME /app/web$fastcgi_script_name;\n    fastcgi_param DOCUMENT_ROOT
      /app/web;\n    include fastcgi_params;\n  }\n\n  # Clean URLs\n  location @rewrite
      {\n    rewrite ^ /index.php;\n  }\n\n  # Image styles\n  location ~ ^/sites/.*/files/styles/
      {\n    try_files $uri @rewrite;\n  }\n\n  location ~* \\.(css|js|png|jpg|jpeg|gif|ico)$
      {\n    expires max;\n    log_not_found off;\n  }\n\n  location = /favicon.ico
      {\n    log_not_found off;\n    access_log off;\n  }\n\n  location = /robots.txt
      {\n    allow all;\n    log_not_found off;\n    access_log off;\n  }\n}\n"
  kind: ConfigMap
  metadata:
    labels:
      app: ${NAME}
    name: example-nginx-config
- apiVersion: v1
  data:
    config.inc.php: |-
      <?php
      /* Server configuration */

      $cfg['Servers'][1]['host'] = getenv("MYSQL_SVCNAME");
      $cfg['Servers'][1]['port'] = 3306;
      $cfg['Servers'][1]['socket'] = '';
      $cfg['Servers'][1]['auth_type'] = 'config';
      $cfg['Servers'][1]['user'] = getenv("MYSQL_USER");
      $cfg['Servers'][1]['password'] = getenv("MYSQL_PASS");

      /* End of servers configuration */

      $cfg['DefaultLang'] = 'en';
      $cfg['ServerDefault'] = 1;
      $cfg['UploadDir'] = '';
      $cfg['SaveDir'] = '';
      ?>
  kind: ConfigMap
  metadata:
    labels:
      app: phpmyadmin
    name: phpmyadmin-config
- apiVersion: v1
  data:
    database-password: SVhtZlRJYVRubnhXSlFLMg==
    database-root-password: YkdVd3NYRXNlVFlmcnNuaw==
    database-user: ZHJ1cGFsOA==
  kind: Secret
  metadata:
    labels:
      app: ${NAME}
      template: wordpress-template-v4
    name: ${NAME}-db-secret
  type: Opaque
- apiVersion: v1
  data:
    database-password: ZVNvaURlblRoaWNP
    database-root-password: bkthdEljVFJJVG9S
    database-user: ZHJ1cGFsOA==
  kind: Secret
  metadata:
    labels:
      app: ${NAME}
    name: ${NAME}
  type: Opaque
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-db
  spec:
    accessModes:
    - ReadWriteOnce
    dataSource: null
    resources:
      requests:
        storage: 2Gi
    storageClassName: gp2
    volumeMode: Filesystem
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-files
  spec:
    accessModes:
    - ReadWriteOnce
    dataSource: null
    resources:
      requests:
        storage: 2Gi
    storageClassName: gp2
    volumeMode: Filesystem
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: tekton-pipeline
  spec:
    resources:
    - name: app-git
      type: git
    - name: app-image
      type: image
    tasks:
    - name: build
      params:
      - name: TLSVERIFY
        value: "false"
      resources:
        inputs:
        - name: source
          resource: app-git
        outputs:
        - name: image
          resource: app-image
      taskRef:
        name: s2i-php
    - name: deploy
      params:
      - name: ARGS
        value: start-build ${NAME}
      runAfter:
        - build
      taskRef:
        name: openshift-client
- apiVersion: tekton.dev/v1alpha1
  kind: Task
  metadata:
    name: openshift-client
  spec:
    inputs:
      params:
      - default: help
        description: The OpenShift CLI arguments to run
        name: ARGS
    steps:
    - args:
      - ${inputs.params.ARGS}
      command:
      - /usr/local/bin/oc
      image: quay.io/openshift-pipeline/openshift-cli:latest
      name: oc
      resources: {}
- apiVersion: tekton.dev/v1alpha1
  kind: Task
  metadata:
    name: s2i-php
  spec:
    inputs:
      params:
      - default: "2"
        description: The minor version of the php
        name: MINOR_VERSION
      - default: .
        description: The location of the path to run s2i from.
        name: PATH_CONTEXT
      - default: "true"
        description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
          registry)
        name: TLSVERIFY
      resources:
      - name: source
        outputImageDir: ""
        targetPath: ""
        type: git
    outputs:
      resources:
      - name: image
        outputImageDir: /builder/home/image-outputs/image
        targetPath: ""
        type: image
    steps:
    - command:
      - s2i
      - build
      - ${inputs.params.PATH_CONTEXT}
      - tgabriel/openshift-nginx-phpfpm-s2i:1.0
      - --as-dockerfile
      - /gen-source/Dockerfile.gen
      image: quay.io/openshift-pipeline/s2i
      name: generate
      resources: {}
      volumeMounts:
      - mountPath: /gen-source
        name: gen-source
      workingDir: /workspace/source
    - command:
      - buildah
      - bud
      - --tls-verify=${inputs.params.TLSVERIFY}
      - --layers
      - -f
      - /gen-source/Dockerfile.gen
      - -t
      - ${outputs.resources.image.url}
      - .
      image: quay.io/buildah/stable
      name: build
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
      - mountPath: /var/lib/containers
        name: varlibcontainers
      - mountPath: /gen-source
        name: gen-source
      workingDir: /gen-source
    - command:
      - phpunit
      - --bootstrap
      - /workspace/source/src/autoload.php
      - /workspace/source/tests/EmailTest.php
      image: jakzal/phpqa
      name: php-testing
      resources: {}
      volumeMounts:
      - mountPath: /gen-source
        name: gen-source
      workingDir: /workspace/source
    - command:
      - buildah
      - push
      - --tls-verify=${inputs.params.TLSVERIFY}
      - ${outputs.resources.image.url}
      - docker://${outputs.resources.image.url}
      image: quay.io/buildah/stable
      name: push
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
      - mountPath: /var/lib/containers
        name: varlibcontainers
    volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineResource
  metadata:
    name: app-git
  spec:
    params:
    - name: url
      value: https://github.com/Tessg22/openshift-wordpress-source-code
    type: git
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineResource
  metadata:
    name: app-image
  spec:
    params:
    - name: url
      value: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/openshift-nginx-phpfpm-s2i
    type: image
parameters:
- description: Specify used namespace
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: wordpress-namespace
- description: Name of application
  displayName: Name
  name: NAME
  required: true
  value: wordpress-application
- description: Specify cluster DNS
  displayName: Cluster DNS to be used in Route
  name: DNS
  required: true
  value: .apps.cluster-fb76.sandbox256.opentlc.com
- description: Specify name of the Wordpress DB table
  displayName: Wordpress database table name
  name: DB_NAME
  required: true
  value: wordpress
